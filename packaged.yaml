AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless for nickthecloudguy
Resources:
  NickTheCloudGuyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        swagger: '2.0'
        info:
          version: '2016-12-09T04:29:17Z'
          title: nickthecloudguy api
        basePath: /prod
        schemes:
        - https
        paths:
          /contact:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''https://nickthecloudguy.com'''
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendEmailFunction.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''POST,OPTIONS'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Origin: '''https://nickthecloudguy.com'''
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
        definitions:
          Empty:
            type: object
            title: Empty Schema
    Metadata:
      SamResourceId: NickTheCloudGuyApi
  SendEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/email_nick.emailHandler
      Runtime: python3.13
      MemorySize: 128
      Timeout: 100
      Description: A HTTP post method to send message to SNS.
      Events:
        SendEmail:
          Type: Api
          Properties:
            RestApiId:
              Ref: NickTheCloudGuyApi
            Path: /contact
            Method: POST
      Policies:
      - SNSPublishMessagePolicy:
          TopicName:
            Fn::GetAtt:
            - ContactFormTopic
            - TopicName
      Environment:
        Variables:
          SNS_TOPIC_ARN:
            Ref: ContactFormTopic
      CodeUri: s3://nickthecloudguy-email/3d400ecbad5960ad40e95032cd97dc15
    Metadata:
      SamResourceId: SendEmailFunction
  ContactFormTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: nickthecloudguy@gmail.com
        Protocol: email
    Metadata:
      SamResourceId: ContactFormTopic
Outputs:
  RestAPIID:
    Description: Rest API ID
    Value:
      Ref: NickTheCloudGuyApi
